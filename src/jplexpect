#!/usr/bin/expect -f

#############################################################################
# jplexpect An expect script to get the horizons ephemeris.
# Hacked to access minor planet data for BASS SSP program
# If there is an error, follow along a regular telnet session.
#
# Some other JPL expect script examples can be found here.
# ftp://ssd.jpl.nasa.gov/pub/ssd/SCRIPTS/
#
#
# Example BASS SSP format for reading in the command line arguments
# Note: the semi-colon at end of the body designation means use small-body table
#    1 is Mercury 1; is Ceres
#    the first date has midnight UT as time. This is about 6p local time Boulder.
#    463 is SBO's JPL Observatxbor code.
#    1results.txt is where to this script diverts the output.
#
# Example input line times, position and results are not hardwired.
#                0           1                   2           3   4
# ./jplexpect "1996 FO3" "2013-06-13  00:00" "2013-10-31" "1h" 463
#
# 2013-06-14T10:46:18-0600 wlg
#############################################################################
#strace 2
# these are basic parameters for vector query

# permit some help with just the command name, and jplexpect -h etc.
proc jplexpect_help {} {
   puts {usage:}
   puts {./jplexpect "1996 FO3;" "2013-06-13  00:00" "2013-10-31" "1h" 463 }
   puts {jplexpect <jplname> <start datetime> <end datetime> <timestep> <obscode>}
   puts {}
   puts {for location on earth: "g: ELong,NLat,ALT @399"}
   puts {user coords requires three lines, example string.}
   puts {coord@399\\r\\rg\\r254.20,40.19321,1.366}
   exit
}


if { [llength $argv] < 2} { jplexpect_help }


set filesuffix {_results.txt}

set targetid  [lindex $argv 0]
set starttime [lindex $argv 1]
set endtime   [lindex $argv 2]
set stepsize  [lindex $argv 3]
set center    [lindex $argv 4]
set fileprefix [ regsub -all {[ ]+} $targetid {_} ]
set filename  "$fileprefix$filesuffix"
set targetid  "$targetid;"
set gao       "coord@399|g|254.20,40.19321,1.366"

# coord@399\r\rg\r254.20,40.19321,1.366


# The 'o' observer quantites require quite a few answers
# these were hammered out using telnet interface directly.

# random notes:
# the \r in the script is needed to send command to JPL
# elevation cutoff means the thing is at/above the horizon.
# daytime lets us tell roughly when the object may be observed
# get the astrometric and apparent ra, apparent az/el, local sidereal
# time, observer range (repress rate), and the apparent hour angle.
# 2,4,7,20,42

set tablequantities   {[2,4,7,20,42]}
set tzcorrection      {0:00}
set timeformat        {BOTH}
set timedigits        {SEC}
#set raformat          {DEG}
set raformat          {HMS}
set highprecision     {NO}
set apparent          {Refracted}
set range             {KM}
set suppressrangerate {YES}
set minimumelevation  "-90"
set maximumairmass    {38}
set risetransitset    {N}
# no airmass -38.0
set skipdaylight      {Y}
set solarcutoff       {[0,180]}
set localhourangle    {[0-12]}
set usecsv            {Y}


# Debug the script, echo back to the output the current values used.
puts "targetid          $targetid          "
puts "starttime         $starttime         "
puts "endtime           $endtime           "
puts "stepsize          $stepsize          "
puts "center            $center            "
puts "filename          $filename          "

puts "tablequantities   $tablequantities   "
puts "tzcorrection      $tzcorrection      "
puts "timeformat        $timeformat        "
puts "timedigits        $timedigits        "
puts "raformat          $raformat          "
puts "highprecision     $highprecision     "
puts "apparent          $apparent          "
puts "range             $range             "
puts "suppressrangerate $suppressrangerate "
puts "minimumelevation  $minimumelevation   "
puts "maximumairmass    $maximumairmass    "
puts "risetransitset    $risetransitset    "
puts "skipdaylight      $skipdaylight      "
puts "solarcutoff       $solarcutoff       "
puts "localhourangle    $localhourangle    "
puts "usecsv            $usecsv            "


#############################################################################
# BODY OF THE MAIN/ORIGINAL SCRIPT
#############################################################################
#long timeout required to generate large requests
set timeout 300

# termid v102 was suggested by startup text from session
set    env(TERM) vt102

# make the connection to JPL
spawn  telnet -n telnet1 ssd.jpl.nasa.gov 6775

# ./jplexpect "1996 FO3;" "2013-06-13  00:00" "2013-10-31" "1h" 463 "1996_FO3_results.txt"
# wait for prompts : vla-1 is some parameters stored at JPL, we ignore.               EXAMPLE
expect "Horizons> "                             { send --   page\r };               # page
expect "Horizons> "                             { send --   $targetid\r };          # 1996 FO3;

expect {
   -re ".*Continue.*$"      {
         send --   \r; \
         expect -re ".*Select.*$"                        { send --   e\r }
       }
   -re ".*Select.*$"                        { send --   e\r }
}
expect -re ".*Observe.*$"                       { send --   o\r };                  # o
if {[string match *|* $center] == 1} {
# will need to split the $center string later, hardwire to test
   puts ""
   puts "center $center"
   set parts     [split $center "|"]; # coord@399|g|254.20,40.19321,1.366
   set ourbody   [lindex $parts 0];   # coord@399
   set ourtype   [lindex $parts 1];   # g
   set ourcoords [lindex $parts 2];   # 254.20,40.19321,1.366
   puts "ourbody $ourbody"
   puts "ourtype $ourtype"
   puts "ourcoords $ourcoords"
   puts ""
   expect -re ".*Coordinate center.*$"       { send -- $ourbody\r };                # coord@399
   expect -re ".*Cylindrical or Geodetic.*$" { send -- $ourtype\r };                # g
   expect -re ".*Specify geodetic.*$"        { send -- $ourcoords\r};               # 254.20,40.19321,1.366
} else {
   expect -re ".*Coordinate.*$"                    { send --   $center\r };         # 463
   expect -re ".*Confirm selected station.*$"      { send --   y\r};                # y
}

expect -re ".*Starting.*$"                      { send --   $starttime\r };         # 2017-08-31 00:00
expect -re ".*Ending.*$"                        { send --   $endtime\r };           # 2017-09-02
expect -re ".*interval.*$"                      { send --   $stepsize\r };          # 1h

# answer no to accept to put in what we want
expect -re ".*Accept default output.*$"         { send --   n\r };                  # n
expect -re ".*Select table quantities.*$"       { send --   $tablequantities\r };   # [2,4,7,20,42]
expect -re ".*reference.*$"                     { send --   J2000\r };              # J2000
expect -re ".*Time-zone correction.*$"          { send --   $tzcorrection\r};       # 0:00
expect -re ".*Output UT time format.*$"         { send --   $timeformat\r };        # BOTH
expect -re ".*Output time digits.*$"            { send --   $timedigits\r };        # SEC
expect -re ".*Output.*format.*$"                { send --   $raformat\r };          # HMS
expect -re ".*Output high precision.*$"         { send --   $highprecision\r };     # NO
expect -re ".*Output APPARENT.*$"               { send --   $apparent\r };          # Refracted
expect -re ".*Set units for RANGE output.*$"    { send --   $range\r };             # KM
expect -re ".*Suppress RANGE_RATE output.*$"    { send --   $suppressrangerate\r }; # YES
expect -re ".*Minimum elevation.*$"             { send --   $minimumelevation\r };  # -90
expect -re ".*Maximum air-mass.*$"              { send --   $maximumairmass\r };    # 38
expect -re ".*Print rise-transit-set only.*$"   { send --   $risetransitset\r };    # N
expect -re ".*Skip printout during daylight.*$" { send --   $skipdaylight\r };      # N
expect -re ".*Solar elongation cut-off.*$"      { send --   $solarcutoff\r };       # [0,180]
expect -re ".*Local Hour Angle cut-off.*$"      { send --   $localhourangle\r };    # [0-12]
expect -re ".*RA/DC angular rate cut-off.*$"    { send --   1000\r };               # 1000
expect -re ".*Spreadsheet CSV format.*$"        { send --   yes\r };                # Y


set outf $filename
log_file -noappend "$outf"
expect -re ".*>>> Select.*:" { send   "q\r" }
send_user "\n"
log_file

exit 0


